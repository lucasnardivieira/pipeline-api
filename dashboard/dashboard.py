import streamlit as st
from sqlalchemy import create_engine
from dotenv import load_dotenv
import os
import pandas as pd
import altair as alt

# Carregar vari치veis de ambiente
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")

# Criar engine de conex칚o
engine = create_engine(DATABASE_URL)

# T칤tulo
st.title("游늳 Dashboard de Pre칞o do Bitcoin")

# Fun칞칚o para carregar dados do banco
@st.cache_data(ttl=60)  # Cache com atualiza칞칚o a cada 60 segundos
def load_data():
    query = "SELECT * FROM bitcoin_data ORDER BY timestamp DESC LIMIT 100"
    df = pd.read_sql(query, engine)
    return df.sort_values("timestamp")

# Bot칚o de atualiza칞칚o manual
if st.button("游댃 Atualizar dados"):
    st.cache_data.clear()

# Carregar dados
df = load_data()

if df.empty:
    st.warning("Sem dados dispon칤veis no momento.")
else:
    # Mostrar tabela
    st.subheader("游늶 칔ltimos Registros")
    st.dataframe(df, use_container_width=True)

    # Gr치fico de linha com Altair
    st.subheader("游늵 Evolu칞칚o do Pre칞o do Bitcoin")
    chart = alt.Chart(df).mark_line(point=True).encode(
        x="timestamp:T",
        y="value:Q",
        tooltip=["timestamp:T", "value:Q"]
    ).properties(width="container")
    
    st.altair_chart(chart, use_container_width=True)

    # Estat칤sticas b치sicas
    st.subheader("游늷 Estat칤sticas")
    st.metric("Valor Atual", f"${df['value'].iloc[-1]:,.2f}")
    st.metric("Valor M치ximo", f"${df['value'].max():,.2f}")
    st.metric("Valor M칤nimo", f"${df['value'].min():,.2f}")
